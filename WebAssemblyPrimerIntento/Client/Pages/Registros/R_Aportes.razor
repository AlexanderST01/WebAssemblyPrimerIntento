@page "/Registros"
@page "/Registros/{AportesId:int}"
@using Alexander_AP1_P1.Models;
@*@inject AportesBLL aportesBLL*@
@inject NotificationService notificationSevice
<EditForm Model="Aporte" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registros Aportes </h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col form-group">
                    <div>
                        <label>Aporte ID</label>
                    </div>
                    <div>
                        <InputNumber class="form-control" @bind-Value="Aporte.AporteId"> </InputNumber>
                    </div>
                </div>
                <div class="col">
                    <br>
                    <button class="btn btn-primary oi oi-magnifying-glass" type="button" @onclick="Buscar"></button>
                </div>
                <div class="col">
                    <label>Facha</label>
                    <InputDate class="form-control" @bind-Value="Aporte.Fecha"></InputDate>
                    <ValidationMessage For="@(() => Aporte.Fecha)" />
                </div>
            </div>
            <div class="row form-gruop">
                <label>Persona</label>
                <div class="col">
                    <InputText class="form-control" @bind-Value="Aporte.Persona"></InputText>
                    <ValidationMessage For="@(() => Aporte.Persona)" />
                </div>
            </div>
            <div class="row">
                <label>Observaci&oacute;n</label>
                <div class="col">
                    <InputText class="form-control" @bind-Value="Aporte.Observacion"></InputText>
                    <ValidationMessage For="@(() => Aporte.Observacion)" />

                </div>
            </div>
            <div class="row">
                <label>Moto</label>
                <div class="col">
                    <InputNumber class="form-control" @bind-Value="Aporte.Monto"></InputNumber>
                    <ValidationMessage For="@(() => Aporte.Monto)" />
                </div>
            </div>
        </div>
        <div class="card-footer">
            <div class="row ">
                <div class="col input-group justify-content-center">
                    <div>
                        <button class="btn btn-primary oi oi-file" type="button" @onclick="Nuevo"> Nuevo</button>
                        <button class="btn btn-success oi oi-document" type="submit"> Guardar</button>
                        <button class="btn btn-danger oi oi-trash" type="button" @onclick="Eliminar">Eliminar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>



@code {
    [Parameter]
    public int AportesId { set; get; }
    public Aportes Aporte { set; get; } = new();
    public int opciones;
    public int montoTotal;
    public bool aportesIdMayorIgualCero = false;
    public bool montoMayorCero = false;
    public bool fechaApirteFechaActual = false;
    protected override void OnInitialized()
    {
        if (AportesId > 0)
        {
            Aporte.AporteId = AportesId;
            Buscar();
        }
    }
    void Guardar()
    {
        if (!Validar())
        {
            if (!montoMayorCero)
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "No Guardado",
                        Detail = "El monto debe ser mayor a cero",
                        Duration = 5_000
                    };
                notificationSevice.Notify(mensaje);
            }
            if (!aportesIdMayorIgualCero)
            {
                var mensaje = new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "No Guardado",
                        Detail = "El Aporte ID debe ser mayor o igual a cero",
                        Duration = 5_000
                    };
                notificationSevice.Notify(mensaje);
            }
            return;
        }
        if (aportesBLL.Guardar(Aporte))
        {
            Nuevo();
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Guardado",
                    Detail = "El aporte se ha guardado",
                    Duration = 5_000
                };
            notificationSevice.Notify(mensaje);
        }

    }
    void Eliminar()
    {
        if (Validar() && Aporte.AporteId > 0)
        {
            Nuevo();
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Eliminado",
                    Detail = "El aporte se ha eliminado",
                    Duration = 5_000
                };
            notificationSevice.Notify(mensaje);
        }
        else
        {
            var mensaje = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "No Eliminado",
                    Detail = "No se ha podido eliminar el aporte",
                    Duration = 5_000
                };
            notificationSevice.Notify(mensaje);
        }
    }
    void Nuevo()
    {
        Aporte = new();
        aportesIdMayorIgualCero = false;
    }
    void Buscar()
    {
        var aportesEncontrado = aportesBLL.Buscar(Aporte.AporteId);
        if (aportesEncontrado != null)
            Aporte = aportesEncontrado;
    }
    bool Validar()
    {
        aportesIdMayorIgualCero = Aporte.AporteId >= 0;
        montoMayorCero = Aporte.Monto >= 0;
        return aportesIdMayorIgualCero || montoMayorCero;

    }

}
